apiVersion: apps/v1
kind: Deployment
metadata:
 name: mydeploy
spec:
 replicas: 2
 selector:
  matchLabels:
   app: test
 template:
  metadata:
   name: mypod
   labels:
    app: test
  spec:
   containers:
    - name: mycon
      image: asoni007/spring_mongo:1
      ports:
       - containerPort: 8080
      env:
       - name: MONGO_DB_HOSTNAME
         value: backend-svc
       - name: MONGO_DB_USERNAME
         value: admin
       - name: MONGO_DB_PASSWORD
         value: mongo123
---
apiVersion: v1
kind: Service
metadata:
 name: myservice
 labels:
  app: test
spec:
 selector:
  app: test
 type: NodePort
 ports:
  - port: 80
    targetPort: 8080
    nodePort: 32235
---
apiVersion: apps/v1
kind: Deployment
metadata:
 name: mongodb
spec:
 replicas: 1
 selector:
  matchLabels:
   app: mongodb
 template:
  metadata:
   name: mydbcon
   labels:
    app: mongodb
  spec:
   containers:
    - name: mycon
      image: mongo
      ports:
       - containerPort: 27017
      env:
       - name: MONGO_INITDB_ROOT_USERNAME
         value: admin
       - name: MONGO_INITDB_ROOT_PASSWORD
         value: mongo123
      volumeMounts:
       - name: myvol
         mountPath: "/data/db"
   volumes:
    - name: myvol
      persistentVolumeClaim:
       claimName: mypvc
---
apiVersion: v1
kind: Service
metadata:
 name: backend-svc
spec:
 selector:
   app: mongodb
 type: ClusterIP
 ports:
  - port: 27017
    targetPort: 27017
---
apiVersion: v1
kind: PersistentVolume
metadata:
 name: mypv
spec:
 storageClassName: manual
 capacity:
  storage: 1Gi
 accessModes:
  - ReadWriteOnce
 persistentVolumeReclaimPolicy: Recycle
 hostPath:
  path: "/tmp/mongovoldata"
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
 name: mypvc
spec:
 storageClassName: manual
 accessModes:
  - ReadWriteOnce
 resources:
  requests:
   storage: 1Gi
